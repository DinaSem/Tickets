{"version":3,"sources":["App.module.css","serviceWorker.ts","App.jsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","App","useState","flights","setFlights","visible","setVisible","radioSortValue","setRadioSortValue","checkboxFilterValue","setCheckboxFilterValue","minPrice","setMinPrice","maxPrice","setMaxPrice","useEffect","fetch","then","res","json","data","className","s","loading","corridorPrice","filter","el","flight","price","total","amount","changeValue","e","target","value","container","wrapperForBoard","radioWrapper","type","name","checked","onChange","event","wrapperForTickets","arr","sortValue","filterValue","sort","a","b","legs","duration","segments","length","arrForRender","slice","map","i","card","key","plashka","carrier","caption","stroka","departureCity","departureAirport","uid","arrivalCity","arrivalAirport","strokaDate","Date","departureDate","toLocaleTimeString","hour","minute","getDate","toLocaleString","month","weekday","Math","floor","plashkaRed","buttons","onClick","val","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fa30b043.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__IBnGz\",\"error\":\"App_error__38bk-\",\"error-message\":\"App_error-message__Gj3lG\",\"active-filter\":\"App_active-filter__2Qrwf\",\"is-done\":\"App_is-done__2OIcy\",\"plashka\":\"App_plashka__o5g9R\",\"plashkaRed\":\"App_plashkaRed__1I4-s\",\"container\":\"App_container__KT7_4\",\"card\":\"App_card__1t0HU\",\"buttons\":\"App_buttons__1gcCO\",\"loading\":\"App_loading__wV8GU\",\"stroka\":\"App_stroka__1NVLX\",\"strokaDate\":\"App_strokaDate__1ndNn\",\"radioWrapper\":\"App_radioWrapper__1mPJW\",\"wrapperForBoard\":\"App_wrapperForBoard__2U42M\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useEffect, useState} from 'react';\r\nimport s from './App.module.css';\r\n\r\nexport const App = () => {\r\n    const [flights, setFlights] = useState(null)\r\n    const [visible, setVisible] = useState(1)\r\n    const [radioSortValue, setRadioSortValue] = useState('1');\r\n    const [checkboxFilterValue, setCheckboxFilterValue] = useState(null);\r\n    const [minPrice, setMinPrice] = useState(0);\r\n    const [maxPrice, setMaxPrice] = useState();\r\n    useEffect(() => {\r\n        fetch('http://localhost:8000/result')\r\n            .then(res => {\r\n                return res.json()\r\n            })\r\n            .then(data => {\r\n                setFlights(data)\r\n            })\r\n    }, [])\r\n\r\n    const showMoreItems = () => {\r\n        setVisible((val) => val + 1)\r\n    }\r\n\r\n    if (!flights) return <div className={s.loading} >loading...</div>\r\n\r\n\r\n    let corridorPrice = flights.flights.filter(el => +el.flight.price.total.amount >= minPrice && +el.flight.price.total.amount <= maxPrice)\r\n\r\n    let arrForRender = (arr, sortValue, filterValue) => {\r\n\r\n        let res = arr;\r\n        \r\n        if (sortValue === '1') {\r\n            res.sort((a, b) => +a.flight.price.total.amount - +b.flight.price.total.amount)\r\n        }\r\n        if (sortValue === '2') {\r\n            res.sort((a, b) => +b.flight.price.total.amount - +a.flight.price.total.amount)\r\n        }\r\n        if (sortValue === '3') {\r\n            res.sort((a, b) => +a.flight.legs.duration - +b.flight.legs.duration)\r\n        }\r\n        if (filterValue != null) {\r\n            //debugger\r\n            res = res.filter(el => filterValue === '1' ? +el.flight.legs[0].segments[0].length === 2 : +el.flight.legs[0].segments[0].length === 1);\r\n            //res.sort((a, b) => a.flight.price.total.amount - b.flight.price.total.amount)\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    function changeValue(e) {\r\n        setRadioSortValue(e.target.value);\r\n    }\r\n\r\n\r\n    return (<div>\r\n            <div className={s.App}>\r\n\r\n                <div className={s.container}>\r\n                    <div className={s.wrapperForBoard}>\r\n                        <p>Сортировать</p>\r\n                        <div className={s.radioWrapper}>\r\n                            <div>\r\n                                <input type=\"radio\"\r\n                                       name=\"radio\"\r\n                                       value=\"1\"\r\n                                       checked={radioSortValue === '1' ? true : false}\r\n                                       onChange={changeValue}/>\r\n                                <span>- цена по возрастанию</span>\r\n                            </div>\r\n                            <div>\r\n                                <input type=\"radio\"\r\n                                       name=\"radio\"\r\n                                       value=\"2\"\r\n                                       checked={radioSortValue === '2' ? true : false}\r\n                                       onChange={changeValue}/>\r\n                                <span>- цена по убыванию</span>\r\n                            </div>\r\n                            <div>\r\n                                <input type=\"radio\"\r\n                                       name=\"radio\"\r\n                                       value=\"3\"\r\n                                       checked={radioSortValue === '3' ? true : false}\r\n                                       onChange={changeValue}/>\r\n                                <span>- по  времени полета</span>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <p>Фильтровать</p>\r\n                        <div className={s.radioWrapper}>\r\n                            <input type=\"checkbox\"\r\n                                   name=\"Value 1\"\r\n                                   checked={checkboxFilterValue === '1'}\r\n                                   onChange={() => setCheckboxFilterValue('1')}\r\n                            />\r\n                            <span>- 1 пересадка</span>\r\n                        </div>\r\n                        <div className={s.radioWrapper}>\r\n                            <input type=\"checkbox\"\r\n                                   name=\"Value 2\"\r\n                                   checked={checkboxFilterValue === '2'}\r\n                                   onChange={() => setCheckboxFilterValue('2')}\r\n                            />\r\n\r\n                            <span>- без пересадок</span>\r\n                        </div>\r\n                        <p>Цена</p>\r\n                        <div className={s.radioWrapper}>\r\n                            <span> От  </span>\r\n                            <input value={minPrice}\r\n                                   onChange={event => setMinPrice(event.target.value)}\r\n                            />\r\n\r\n                        </div>\r\n                        <div className={s.radioWrapper}>\r\n                            <span> До  </span>\r\n                            <input value={maxPrice}\r\n                                   onChange={event => setMaxPrice(event.target.value)}\r\n                            />\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={s.wrapperForTickets}>\r\n                        {flights && arrForRender(corridorPrice, radioSortValue, checkboxFilterValue).slice(0, visible).map((el, i) => {\r\n                            return <div className={s.card} key={i}>\r\n                                <div className={s.plashka}>\r\n                                    <span>{el.flight.carrier.caption} </span>\r\n                                    <span>{el.flight.price.total.amount} &#8381;</span>\r\n\r\n                                </div>\r\n                                <div className={s.stroka}>\r\n                              <span>\r\n                              <span>{el.flight.legs[0].segments[0].departureCity.caption}, </span>\r\n                              <span>{el.flight.legs[0].segments[0].departureAirport.caption} </span>\r\n                              <span>({el.flight.legs[0].segments[0].departureAirport.uid}) </span>\r\n                              </span>\r\n                                    <span>---></span>\r\n\r\n\r\n                                    <span>\r\n                              <span>{el.flight.legs[0].segments[1].arrivalCity.caption}, </span>\r\n                              <span>{el.flight.legs[0].segments[1].arrivalAirport.caption} </span>\r\n                              <span>({el.flight.legs[0].segments[1].arrivalAirport.uid}) </span>\r\n                              </span>\r\n\r\n                                </div>\r\n                                <div className={s.strokaDate}>\r\n                              <span>\r\n                                  <span>{new Date(el.flight.legs[0].segments[0].departureDate).toLocaleTimeString([], {\r\n                                      hour: '2-digit',\r\n                                      minute: '2-digit'\r\n                                  })} </span>\r\n                                  <span> {new Date(el.flight.legs[0].segments[0].departureDate).getDate()} </span>\r\n                                  <span> {new Date(el.flight.legs[0].segments[0].departureDate).toLocaleString('default', {month: 'short'})} </span>\r\n                                  <span> {new Date(el.flight.legs[0].segments[0].departureDate).toLocaleString('default', {weekday: 'short'})} </span>\r\n                              </span>\r\n                                    <span> {Math.floor(el.flight.legs[0].duration / 60)} часов</span>\r\n                                    <span>\r\n                                  <span> {new Date(el.flight.legs[0].segments[1].departureDate).getDate()} </span>\r\n                                  <span> {new Date(el.flight.legs[0].segments[1].departureDate).toLocaleString('default', {month: 'short'})} </span>\r\n                                  <span> {new Date(el.flight.legs[0].segments[1].departureDate).toLocaleString('default', {weekday: 'short'})} </span>\r\n                                  <span>{new Date(el.flight.legs[0].segments[1].departureDate).toLocaleTimeString([], {\r\n                                      hour: '2-digit',\r\n                                      minute: '2-digit'\r\n                                  })} </span>\r\n                              </span>\r\n                                </div>\r\n                                <div\r\n                                    className={s.stroka}>------------------- {el.flight.legs[0].segments.length === 2 ? 1 : 0} пересадка\r\n                                    ----------------------\r\n                                </div>\r\n\r\n                                <div className={s.stroka}>\r\n                               <span>\r\n                              <span>{el.flight.legs[1].segments[0].departureCity.caption}, </span>\r\n                              <span>{el.flight.legs[1].segments[0].departureAirport.caption} </span>\r\n                              <span>({el.flight.legs[1].segments[0].departureAirport.uid}) </span>\r\n                               </span>\r\n                                    <span> --->   </span>\r\n                                    <span>\r\n                              <span>{el.flight.legs[1].segments[1].arrivalCity.caption}, </span>\r\n                              <span>{el.flight.legs[1].segments[1].arrivalAirport.caption} </span>\r\n                              <span>({el.flight.legs[1].segments[1].arrivalAirport.uid}) </span>\r\n                              </span>\r\n\r\n                                </div>\r\n                                <div className={s.strokaDate}>\r\n                              <span>\r\n                                  <span>{new Date(el.flight.legs[1].segments[0].departureDate).toLocaleTimeString([], {\r\n                                      hour: '2-digit',\r\n                                      minute: '2-digit'\r\n                                  })} </span>\r\n                                  <span> {new Date(el.flight.legs[1].segments[0].departureDate).getDate()} </span>\r\n                                  <span> {new Date(el.flight.legs[1].segments[0].departureDate).toLocaleString('default', {month: 'short'})} </span>\r\n                                  <span> {new Date(el.flight.legs[1].segments[0].departureDate).toLocaleString('default', {weekday: 'short'})} </span>\r\n                              </span>\r\n                                    <span> {Math.floor(el.flight.legs[1].duration / 60)} часов</span>\r\n                                    <span>\r\n                                  <span> {new Date(el.flight.legs[1].segments[1].departureDate).getDate()} </span>\r\n                                  <span> {new Date(el.flight.legs[1].segments[1].departureDate).toLocaleString('default', {month: 'short'})} </span>\r\n                                  <span> {new Date(el.flight.legs[1].segments[1].departureDate).toLocaleString('default', {weekday: 'short'})} </span>\r\n                                  <span>{new Date(el.flight.legs[1].segments[1].departureDate).toLocaleTimeString([], {\r\n                                      hour: '2-digit',\r\n                                      minute: '2-digit'\r\n                                  })} </span>\r\n                              </span>\r\n                                </div>\r\n                                <div\r\n                                    className={s.stroka}>------------------- {el.flight.legs[0].segments.length === 2 ? 1 : 0} пересадка\r\n                                    ----------------------\r\n                                </div>\r\n                                <span> Рейс выполняет:{el.flight.carrier.caption} </span>\r\n                                <div className={s.plashkaRed}>\r\n                                    ВЫБРАТЬ\r\n                                </div>\r\n                            </div>\r\n                        })}\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button className={s.buttons} onClick={showMoreItems}>Показать еще</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {App} from \"./App\";\r\n\r\n\r\nReactDOM.render(<App/>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}